-- Altera Memory Initialization File (MIF)

DEPTH = 2048;
WIDTH = 16;

ADDRESS_RADIX = HEX;
DATA_RADIX = HEX;

CONTENT
  BEGIN
    [000..7FF] : 0000;  -- Default to NOP

           000 : 0882;  -- 	LOAD   Zero
           001 : 9883;  -- 	OUT    LVELCMD     ; Stop motors
           002 : 988B;  -- 	OUT    RVELCMD
           003 : 98B2;  -- 	OUT    SONAREN     ; Disable sonar (optional)
           004 : 980A;  -- 	OUT    BEEP        ; Stop any beeping (optional)
           005 : 806A;  -- 	CALL   SetupI2C    ; Configure the I2C to read the battery voltage
           006 : 804C;  -- 	CALL   BattCheck   ; Get battery voltage (and end if too low).
           007 : 9806;  -- 	OUT    LCD         ; Display battery voltage (hex, tenths of volts)
           008 : 9000;  -- 	IN     SWITCHES
           009 : 980A;  -- 	OUT    BEEP
           00A : 9003;  -- 	IN     XIO         ; XIO contains SAFETY signal
           00B : 4891;  -- 	AND    Mask4       ; SAFETY signal is bit 4
           00C : 3812;  -- 	JPOS   WaitForUser ; If ready, jump to wait for PB3
           00D : 9002;  -- 	IN     TIMER       ; We'll use the timer value to
           00E : 488E;  -- 	AND    Mask1       ;  blink LED17 as a reminder to toggle SW17
           00F : 6008;  -- 	SHIFT  8           ; Shift over to LED17
           010 : 9807;  -- 	OUT    XLEDS       ; LED17 blinks at 2.5Hz (10Hz/4)
           011 : 2808;  -- 	JUMP   WaitForSafety
           012 : B800;  -- 	LOADI  0
           013 : 980A;  -- 	OUT    BEEP
           014 : 9002;  -- 	IN     TIMER       ; We'll blink the LEDs above PB3
           015 : 488E;  -- 	AND    Mask1
           016 : 6005;  -- 	SHIFT  5           ; Both LEDG6 and LEDG7
           017 : 1080;  -- 	STORE  Temp        ; (overkill, but looks nice)
           018 : 6001;  -- 	SHIFT  1
           019 : 5080;  -- 	OR     Temp
           01A : 9807;  -- 	OUT    XLEDS
           01B : 9003;  -- 	IN     XIO         ; XIO contains KEYs
           01C : 488F;  -- 	AND    Mask2       ; KEY3 mask (KEY0 is reset and can't be read)
           01D : 3812;  -- 	JPOS   WaitForUser ; not ready (KEYs are active-low, hence JPOS)
           01E : 0882;  -- 	LOAD   Zero
           01F : 9807;  -- 	OUT    XLEDS       ; clear LEDs once ready to continue
           020 : 98C3;  -- 	OUT    RESETPOS    ; reset odometer in case wheels moved after programming	
           021 : 90C2;  -- 	IN     THETA       ; get the current angular position
           022 : 6F4C;  -- 	ADDI   -180        ; test whether facing 0-179 or 180-359
           023 : 3826;  -- 	JPOS   NegAngle    ; robot facing 180-360; handle that separately
           024 : 68B4;  -- 	ADDI   180         ; undo previous subtraction
           025 : 2827;  -- 	JUMP   CheckAngle  ; THETA positive, so carry on
           026 : 6F4C;  -- 	ADDI   -180        ; finish conversion to negative angle:
           027 : 9806;  -- 	OUT    LCD         ; Good data to display for debugging
           028 : 382D;  -- 	JPOS   TurnRight   ; handle +/- separately
           029 : 1833;  -- 	ADD    DeadZone
           02A : 3831;  -- 	JPOS   NoTurn
           02B : 089F;  -- 	LOAD   RSlow
           02C : 2834;  -- 	JUMP   SendToMotors
           02D : 2033;  -- 	SUB    DeadZone    ; if near 0, don't turn
           02E : 3031;  -- 	JNEG   NoTurn
           02F : 089E;  -- 	LOAD   FSlow
           030 : 2834;  -- 	JUMP   SendToMotors
           031 : B800;  -- 	LOADI  0           ; new LOADI instruction
           032 : 2834;  -- 	JUMP   SendToMotors
           033 : 0005;  -- DeadZone:  DW 5        ; Note that you can place data anywhere.
           034 : 1080;  -- 	STORE  Temp        ; store calculated desired velocity
           035 : 9883;  -- 	OUT    LVELCMD
           036 : 9804;  -- 	OUT    SSEG1       ; for debugging purposes
           037 : B800;  -- 	LOADI  0
           038 : 2080;  -- 	SUB    Temp        ; AC = 0 - velocity
           039 : 988B;  -- 	OUT    RVELCMD	
           03A : 9805;  -- 	OUT    SSEG2       ; debugging
           03B : 2821;  -- 	JUMP   GetAngle    ; repeat forever
           03C : 0882;  -- 	LOAD   Zero         ; Stop everything.
           03D : 9883;  -- 	OUT    LVELCMD
           03E : 988B;  -- 	OUT    RVELCMD
           03F : 98B2;  -- 	OUT    SONAREN
           040 : 0843;  -- 	LOAD   DEAD         ; An indication that we are dead
           041 : 9805;  -- 	OUT    SSEG2
           042 : 2842;  -- 	JUMP   Forever      ; Do this forever.
           043 : DEAD;  -- 	DEAD:  DW &HDEAD    ; Example of a "local" variable
           044 : 9802;  -- 	OUT    TIMER
           045 : 90C9;  -- 	IN     LIN
           046 : 9805;  -- 	OUT    SSEG2
           047 : 9002;  -- 	IN     TIMER
           048 : 9807;  -- 	OUT    XLEDS       ; User-feedback that a pause is occurring.
           049 : 6FF6;  -- 	ADDI   -10         ; 1 second in 10Hz.
           04A : 3045;  -- 	JNEG   Wloop
           04B : 8800;  -- 	RETURN
           04C : 8064;  -- 	CALL   GetBattLvl
           04D : 404C;  -- 	JZERO  BattCheck   ; A/D hasn't had time to initialize
           04E : 20A4;  -- 	SUB    MinBatt
           04F : 3052;  -- 	JNEG   DeadBatt
           050 : 18A4;  -- 	ADD    MinBatt     ; get original value back
           051 : 8800;  -- 	RETURN
           052 : 0886;  -- 	LOAD   Four
           053 : 980A;  -- 	OUT    BEEP        ; start beep sound
           054 : 8064;  -- 	CALL   GetBattLvl  ; get the battery level
           055 : 9804;  -- 	OUT    SSEG1       ; display it everywhere
           056 : 9805;  -- 	OUT    SSEG2
           057 : 9806;  -- 	OUT    LCD
           058 : 0882;  -- 	LOAD   Zero
           059 : 6FFF;  -- 	ADDI   -1          ; 0xFFFF
           05A : 9801;  -- 	OUT    LEDS        ; all LEDs on
           05B : 9807;  -- 	OUT    XLEDS
           05C : 8044;  -- 	CALL   Wait1       ; 1 second
           05D : 0882;  -- 	Load   Zero
           05E : 980A;  -- 	OUT    BEEP        ; stop beeping
           05F : 0882;  -- 	LOAD   Zero
           060 : 9801;  -- 	OUT    LEDS        ; LEDs off
           061 : 9807;  -- 	OUT    XLEDS
           062 : 8044;  -- 	CALL   Wait1       ; 1 second
           063 : 2852;  -- 	JUMP   DeadBatt    ; repeat forever
           064 : 08A6;  -- 	LOAD   I2CRCmd     ; 0x0190 (write 0B, read 1B, addr 0x90)
           065 : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD
           066 : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           067 : 8072;  -- 	CALL   BlockI2C    ; wait for it to finish
           068 : 9091;  -- 	IN     I2C_DATA    ; get the returned data
           069 : 8800;  -- 	RETURN
           06A : 8072;  -- 	CALL   BlockI2C    ; wait for idle
           06B : 08A5;  -- 	LOAD   I2CWCmd     ; 0x1190 (write 1B, read 1B, addr 0x90)
           06C : 9890;  -- 	OUT    I2C_CMD     ; to I2C_CMD register
           06D : 0882;  -- 	LOAD   Zero        ; 0x0000 (A/D port 0, no increment)
           06E : 9891;  -- 	OUT    I2C_DATA    ; to I2C_DATA register
           06F : 9892;  -- 	OUT    I2C_RDY     ; start the communication
           070 : 8072;  -- 	CALL   BlockI2C    ; wait for it to finish
           071 : 8800;  -- 	RETURN
           072 : 0882;  -- 	LOAD   Zero
           073 : 1080;  -- 	STORE  Temp        ; Used to check for timeout
           074 : 0880;  -- 	LOAD   Temp
           075 : 6801;  -- 	ADDI   1           ; this will result in ~0.1s timeout
           076 : 1080;  -- 	STORE  Temp
           077 : 407B;  -- 	JZERO  I2CError    ; Timeout occurred; error
           078 : 9092;  -- 	IN     I2C_RDY     ; Read busy signal
           079 : 3874;  -- 	JPOS   BI2CL       ; If not 0, try again
           07A : 8800;  -- 	RETURN             ; Else return
           07B : 0882;  -- 	LOAD   Zero
           07C : 692C;  -- 	ADDI   &H12C       ; "I2C"
           07D : 9804;  -- 	OUT    SSEG1
           07E : 9805;  -- 	OUT    SSEG2       ; display error message
           07F : 287B;  -- 	JUMP   I2CError
           080 : 0000;  -- Temp:     DW 0 ; "Temp" is not a great name, but can be useful
           081 : FFFF;  -- NegOne:   DW -1
           082 : 0000;  -- Zero:     DW 0
           083 : 0001;  -- One:      DW 1
           084 : 0002;  -- Two:      DW 2
           085 : 0003;  -- Three:    DW 3
           086 : 0004;  -- Four:     DW 4
           087 : 0005;  -- Five:     DW 5
           088 : 0006;  -- Six:      DW 6
           089 : 0007;  -- Seven:    DW 7
           08A : 0008;  -- Eight:    DW 8
           08B : 0009;  -- Nine:     DW 9
           08C : 000A;  -- Ten:      DW 10
           08D : 0001;  -- Mask0:    DW &B00000001
           08E : 0002;  -- Mask1:    DW &B00000010
           08F : 0004;  -- Mask2:    DW &B00000100
           090 : 0008;  -- Mask3:    DW &B00001000
           091 : 0010;  -- Mask4:    DW &B00010000
           092 : 0020;  -- Mask5:    DW &B00100000
           093 : 0040;  -- Mask6:    DW &B01000000
           094 : 0080;  -- Mask7:    DW &B10000000
           095 : 00FF;  -- LowByte:  DW &HFF      ; binary 00000000 1111111
           096 : 000F;  -- LowNibl:  DW &HF       ; 0000 0000 0000 1111
           097 : 03C1;  -- OneMeter: DW 961       ; ~1m in 1.04mm units
           098 : 01E1;  -- HalfMeter: DW 481      ; ~0.5m in 1.04mm units
           099 : 024A;  -- TwoFeet:  DW 586       ; ~2ft in 1.04mm units
           09A : 005A;  -- Deg90:    DW 90        ; 90 degrees in odometer units
           09B : 00B4;  -- Deg180:   DW 180       ; 180
           09C : 010E;  -- Deg270:   DW 270       ; 270
           09D : 0168;  -- Deg360:   DW 360       ; can never actually happen; for math only
           09E : 0064;  -- FSlow:    DW 100       ; 100 is about the lowest velocity value that will move
           09F : FF9C;  -- RSlow:    DW -100
           0A0 : 015E;  -- FMid:     DW 350       ; 350 is a medium speed
           0A1 : FEA2;  -- RMid:     DW -350
           0A2 : 01F4;  -- FFast:    DW 500       ; 500 is almost max speed (511 is max)
           0A3 : FE0C;  -- RFast:    DW -500
           0A4 : 008C;  -- MinBatt:  DW 140       ; 14.0V - minimum safe battery voltage
           0A5 : 1190;  -- I2CWCmd:  DW &H1190    ; write one i2c byte, read one byte, addr 0x90
           0A6 : 0190;  -- I2CRCmd:  DW &H0190    ; write nothing, read one byte, addr 0x90
  END;
